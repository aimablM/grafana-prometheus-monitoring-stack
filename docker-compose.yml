version: '3.8'

# Define the networks to be used by the networking stack
networks:
  monitoring-network:
    driver: bridge

# Define persistent named volumes for production
volumes:
  prometheus_data:
  grafana_data:

# Define the services to be used in the monitoring stack, images, names, port bindings, volumes and network
services:
  # Prometheus service - used as a raw data collector
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      # Config file is bind-mounted for easy updates
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Named volume for persistent data
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring-network

  # Grafana service - used as a visualization tool of the data collected by Prometheus
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000" # External port 3001, internal 3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
    networks:
      - monitoring-network
    volumes:
      # Named volume for Grafana persistent data
      - grafana_data:/var/lib/grafana

  # Node Exporter service - used to collect system metrics (CPU, memory, disk usage, etc.). Exposes system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitoring-network

  # cAdvisor service - used to collect container metrics (CPU, memory, network, etc.). Exposes container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring-network
